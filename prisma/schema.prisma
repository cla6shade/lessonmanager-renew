generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Holding {
  userId     Int?      @map("userid")
  startDate  DateTime? @map("start") @db.Date
  endDate    DateTime? @map("end") @db.Date
  holdedAt   DateTime? @default(now()) @map("holded_at") @db.DateTime(0)
  id         Int       @id @default(autoincrement()) @map("holdingid")
  paymentId  Int?      @map("paymentid")
  isResolved Boolean?  @default(false) @map("is_resolved")

  @@map("holdings")
}

model LessonBannedTimes {
  id        Int       @id @default(autoincrement()) @map("bannedid")
  teacherId Int?      @map("teacherid")
  date      DateTime? @db.Date
  hour      Int?      @db.SmallInt

  @@map("lesson_banned_times")
}

model LessonModifyHistory {
  id            Int       @id @default(autoincrement()) @map("modifyid")
  modifiedAt    DateTime  @default(now()) @map("time") @db.Timestamp(0)
  type          Int?      @db.SmallInt
  teacherId     Int?      @map("teacherid")
  userId        Int?      @map("userid")
  lessondue     DateTime? @db.Date
  lessonhour    Int?      @db.SmallInt
  lessonId      Int?      @map("lessonid")
  createdByType Int?      @map("created_by") @db.SmallInt
  createdById   Int?      @map("created_id")

  @@map("lesson_modify_history")
}

model Lesson {
  id        Int       @id @default(autoincrement()) @map("lessonid")
  dueDate   DateTime? @map("due") @db.Date
  dueHour   Int?      @map("hour") @db.SmallInt
  teacherId Int?      @map("teacherid")
  isDone    Boolean?  @default(false) @map("is_done")
  userId    Int?      @map("userid")
  username  String?   @db.VarChar(20)
  isGrand   Boolean?  @map("is_grand")
  location  Int?      @db.SmallInt
  note      String?   @db.VarChar(810)
  contact   String?   @db.VarChar(20)

  @@index([dueDate], map: "idx_due")
  @@index([teacherId], map: "idx_teacherid")
  @@index([teacherId, dueDate, dueHour], map: "idx_teacherid_due_hour")
  @@map("lessons")
}

model Payment {
  userId            Int       @map("userid")
  months            Int?      @db.SmallInt
  lessonCount       Int?      @map("lesson_count") @db.SmallInt
  isReregister      Boolean?  @map("is_reregister")
  method            Int?      @db.SmallInt
  startDate         DateTime? @map("start") @db.Date
  endDate           DateTime? @map("end") @db.Date
  memo              String?   @map("etc") @db.VarChar(180)
  createdAt         DateTime? @map("payment_date") @db.Date
  paymentAmount     Int?      @map("payment_amount")
  refunded          Boolean?  @default(false)
  refundedAmount    Int?      @default(0) @map("refunded_amount")
  isStartDateNonSet Boolean?  @default(false) @map("startdate_non_set")
  id                Int       @id @default(autoincrement()) @map("paymentid")
  maxHoldingAmount  Int?      @default(0) @map("max_holding_amount")
  usedHoldingAmount Int?      @default(0) @map("used_holding_amount")

  @@index([userId, refunded, startDate, endDate], map: "idx_payments_userid_refunded_start_end")
  @@map("payments")
}

model Teacher {
  id                  Int       @id @default(autoincrement()) @map("teacherid")
  location            Int?      @db.SmallInt
  gender              Boolean?
  name                String?   @db.VarChar(20)
  email               String?   @db.VarChar(38)
  birth               DateTime? @db.Date
  contact             String?   @db.VarChar(12)
  loginId             String?   @map("loginid") @db.VarChar(40)
  password            String?   @db.VarChar(88)
  major               Int?      @db.SmallInt
  registeredAt        DateTime? @map("registration") @db.Date
  address             String?   @db.VarChar(255)
  workingDays         Int?      @map("working_days") @db.SmallInt
  isLeaved            Boolean?  @default(false) @map("leaved")
  lessonReservedCount Int?      @default(0) @map("lessons_reserved_count") @db.SmallInt

  @@map("teachers")
}

model UserHoldingRequest {
  id          Int      @map("paymentid")
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  userId      Int      @map("userid")
  holdingDays Int      @map("holding_days")
  isResolved  Boolean  @default(false) @map("is_resolved")
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.DateTime(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user")

  @@id([id, startDate])
  @@index([userId], map: "idx_userid")
  @@map("user_holding_requests")
}

model User {
  id                Int                  @id @default(autoincrement()) @map("userid")
  location          Int?                 @db.SmallInt
  name              String?              @db.VarChar(20)
  gender            Boolean?
  birth             DateTime?            @db.Date
  contact           String?              @db.VarChar(20)
  address           String?              @db.VarChar(255)
  loginid           String?              @db.VarChar(40)
  password          String?              @db.VarChar(88)
  email             String?              @db.VarChar(38)
  ability           String?              @db.VarChar(60)
  genre             String?              @db.VarChar(60)
  howto             Int?                 @db.SmallInt
  teacherInChargeId Int?                 @default(0) @map("teacher_in_charge")
  latestLessonId    Int?                 @default(0) @map("latest_lessonid")
  lessonCount       Int?                 @default(0) @map("lesson_count") @db.SmallInt
  usedLessonCount   Int?                 @default(0) @map("lesson_count_used") @db.SmallInt
  paymentCount      Int?                 @default(0) @map("payment_count") @db.SmallInt
  streakCount       Int?                 @default(0) @map("streak_count") @db.SmallInt
  registeredAt      DateTime             @default(now()) @map("registration") @db.Timestamp(0)
  isLeaved          Boolean?             @default(false) @map("leaved")
  isSubscribed      Boolean?             @default(true) @map("subscribed")
  point             Int?                 @default(0)
  holdingRequests   UserHoldingRequest[]

  @@index([teacherInChargeId], map: "idx_users_teacherid")
  @@map("users")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model WorkingTime {
  teacherid Int
  times     String? @db.LongText

  @@map("working_times")
  @@ignore
}
