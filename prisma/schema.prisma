generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Holding {
  userid      Int?
  start       DateTime? @db.Date
  end         DateTime? @db.Date
  holded_at   DateTime? @default(now()) @db.DateTime(0)
  holdingid   Int       @id @default(autoincrement())
  paymentid   Int?
  is_resolved Boolean?  @default(false)

  @@map("holdings")
}

model LessonBannedTimes {
  bannedid  Int       @id @default(autoincrement())
  teacherid Int?
  date      DateTime? @db.Date
  hour      Int?      @db.SmallInt

  @@map("lesson_banned_times")
}

model LessonModifyHistory {
  modifyid   Int       @id @default(autoincrement())
  time       DateTime  @default(now()) @db.Timestamp(0)
  type       Int?      @db.SmallInt
  teacherid  Int?
  userid     Int?
  lessondue  DateTime? @db.Date
  lessonhour Int?      @db.SmallInt
  lessonid   Int?
  created_by Int?      @db.SmallInt
  created_id Int?

  @@map("lesson_modify_history")
}

model Lesson {
  lessonid  Int       @id @default(autoincrement())
  due       DateTime? @db.Date
  hour      Int?      @db.SmallInt
  teacherid Int?
  is_done   Boolean?  @default(false)
  userid    Int?
  username  String?   @db.VarChar(20)
  is_grand  Boolean?
  location  Int?      @db.SmallInt
  note      String?   @db.VarChar(810)
  contact   String?   @db.VarChar(20)

  @@index([due], map: "idx_due")
  @@index([teacherid], map: "idx_teacherid")
  @@index([teacherid, due, hour], map: "idx_teacherid_due_hour")
  @@map("lessons")
}

model Payment {
  userid              Int
  months              Int?      @db.SmallInt
  lesson_count        Int?      @db.SmallInt
  is_reregister       Boolean?
  method              Int?      @db.SmallInt
  start               DateTime? @db.Date
  end                 DateTime? @db.Date
  etc                 String?   @db.VarChar(180)
  payment_date        DateTime? @db.Date
  payment_amount      Int?
  refunded            Boolean?  @default(false)
  refunded_amount     Int?      @default(0)
  startdate_non_set   Boolean?  @default(false)
  paymentid           Int       @id @default(autoincrement())
  max_holding_amount  Int?      @default(0)
  used_holding_amount Int?      @default(0)

  @@index([userid, refunded, start, end], map: "idx_payments_userid_refunded_start_end")
  @@map("payments")
}

model Teacher {
  teacherid              Int       @id @default(autoincrement())
  location               Int?      @db.SmallInt
  gender                 Boolean?
  name                   String?   @db.VarChar(20)
  email                  String?   @db.VarChar(38)
  birth                  DateTime? @db.Date
  contact                String?   @db.VarChar(12)
  loginid                String?   @db.VarChar(40)
  password               String?   @db.VarChar(88)
  major                  Int?      @db.SmallInt
  registration           DateTime? @db.Date
  address                String?   @db.VarChar(255)
  working_days           Int?      @db.SmallInt
  leaved                 Boolean?  @default(false)
  lessons_reserved_count Int?      @default(0) @db.SmallInt

  @@map("teachers")
}

model UserHoldingRequest {
  paymentid    Int
  start_date   DateTime @db.Date
  end_date     DateTime @db.Date
  userid       Int
  holding_days Int
  is_resolved  Boolean  @default(false)
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @db.DateTime(0)
  users        User     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user")

  @@id([paymentid, start_date])
  @@index([userid], map: "idx_userid")
  @@map("user_holding_requests")
}

model User {
  id                Int                  @id @default(autoincrement()) @map("userid")
  location          Int?                 @db.SmallInt
  name              String?              @db.VarChar(20)
  gender            Boolean?
  birth             DateTime?            @db.Date
  contact           String?              @db.VarChar(20)
  address           String?              @db.VarChar(255)
  loginid           String?              @db.VarChar(40)
  password          String?              @db.VarChar(88)
  email             String?              @db.VarChar(38)
  ability           String?              @db.VarChar(60)
  genre             String?              @db.VarChar(60)
  howto             Int?                 @db.SmallInt
  teacherInChargeId Int?                 @default(0) @map("teacher_in_charge")
  latestLessonId    Int?                 @default(0) @map("latest_lessonid")
  lessonCount       Int?                 @default(0) @map("lesson_count") @db.SmallInt
  usedLessonCount   Int?                 @default(0) @map("lesson_count_used") @db.SmallInt
  paymentCount      Int?                 @default(0) @map("payment_count") @db.SmallInt
  streakCount       Int?                 @default(0) @map("streak_count") @db.SmallInt
  registeredAt      DateTime             @default(now()) @map("registration") @db.Timestamp(0)
  isLeaved          Boolean?             @default(false) @map("leaved")
  isSubscribed      Boolean?             @default(true) @map("subscribed")
  point             Int?                 @default(0)
  holdingRequests   UserHoldingRequest[]

  @@index([teacherInChargeId], map: "idx_users_teacherid")
  @@map("users")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model WorkingTime {
  teacherid Int
  times     String? @db.LongText

  @@map("working_times")
  @@ignore
}
